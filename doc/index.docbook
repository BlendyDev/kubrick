<?xml version="1.0" ?>
<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.1.2-Based Variant V1.1//EN" "dtd/kdex.dtd" [
  <!ENTITY kubrick "<application>Kubrick</application>">
  <!ENTITY kappname "&kubrick;"><!-- Do *not* replace kappname-->
  <!ENTITY package "kde-module"><!-- kdebase, kdeadmin, etc -->
  <!ENTITY % addindex "IGNORE">
  <!ENTITY % English "INCLUDE"><!-- change language only here -->
  
  
  <!-- Do not define any other entities; instead, use the entities
       from kde-genent.entities and $LANG/user.entities. -->
]>
<!-- kdoctemplate v0.8 October 1 1999 
     Minor update to "Credits and Licenses" section on August 24, 2000
     Removed "Revision history" section on 22 January 2001
     Changed to Installation/Help menu entities 18 October 2001
     Other minor cleanup and changes 18 October 2001 -->


<!--
This template was designed by: David Rugge davidrugge@mindspring.com
with lots of help from: Eric Bischoff ebisch@cybercable.tm.fr
and Frederik Fouvry fouvry@sfs.nphil.uni-tuebingen.de
of the KDE DocBook team.

You may freely use this template for writing any sort of KDE documentation.
If you have any changes or improvements, please let us know.

Remember:
- in XML, the case of the <tags> and attributes is relevant ;
- also, quote all attributes.

Please don't forget to remove all these comments in your final documentation,
thanks ;-).
-->

<!-- ................................................................ -->

<!-- The language must NOT be changed here. -->

<book lang="&language;">

<!-- This header contains all of the meta-information for the document such
as Authors, publish date, the abstract, and Keywords -->

<bookinfo>
<title>The &kubrick; Handbook</title>

<authorgroup>
<author>
<firstname>Ian</firstname>
<othername></othername>
<surname>Wadham</surname>
<affiliation>
<address><email>ianw@netspace.net.au</email></address>
</affiliation>
</author>
</authorgroup>

<!-- TRANS:ROLES_OF_TRANSLATORS -->

<copyright>
<year>2006</year>
<holder>Ian Wadham</holder>
</copyright>
<!-- Translators: put here the copyright notice of the translation -->
<!-- Put here the FDL notice.  Read the explanation in fdl-notice.docbook
     and in the FDL itself on how to use it. -->
<legalnotice>&FDLNotice;</legalnotice>

<!-- Date and version information of the documentation
Don't forget to include this last date and this last revision number, we
need them for translation coordination !
Please respect the format of the date (YYYY-MM-DD) and of the version
(V.MM.LL), it could be used by automation scripts.
Do NOT change these in the translation. -->

<date>2006-04-02</date>
<releaseinfo>0.1</releaseinfo>

<!-- Abstract about this handbook -->

<abstract>
<para>
&kubrick; is a game based on the Rubik's Cube puzzle.  The cube sizes range
from 2x2x2 up to 6x6x6, or you can play with irregular <quote>bricks</quote>
such as 5x3x2 or <quote>mats</quote> such as 6x4x1.  The game has a selection
of puzzles at several levels of difficulty, as well as demos of pretty patterns
and solution moves, or you can make up your own puzzles ...
</para>
</abstract>

<keywordset>
<keyword>KDE</keyword>
<keyword>kubrick</keyword>
<keyword>Rubik</keyword>
<keyword>Cube</keyword>
<keyword>Rubik's Cube</keyword>
</keywordset>

</bookinfo>

<!-- The contents of the documentation begin here.  Label
each chapter so with the id attribute. This is necessary for two reasons: it
allows you to easily reference the chapter from other chapters of your
document, and if there is no ID, the name of the generated HTML files will vary
from time to time making it hard to manage for maintainers and for the CVS
system. Any chapter labelled (OPTIONAL) may be left out at the author's
discretion. Other chapters should not be left out in order to maintain a
consistent documentation style across all KDE apps. -->

<chapter id="introduction">
<title>Introduction</title>

<para>&kubrick; is based on the famous Rubik's Cube puzzle, invented by
Professor Erno Rubik in Hungary in the 1970s.  His original puzzle was a cube
that appeared to consist of 27 smaller cubes, called <quote>cubies</quote>,
arranged in a 3x3x3 stack.  Actually, the inside of the cube contained an
ingenious mechanism that made it possible to rotate groups of 9 cubies (3x3),
which we shall call <quote>layers</quote> or <quote>slices</quote>, in several
directions at right angles to each other.</para>

<para>The outside faces of the cubies had stickers of 6 different colors, one
for each of the 6 faces of the main cube.  As you rotated the slices, the
stickers would become shuffled and the faces of the main cube would become a
jumble of colors.  The idea of the puzzle was to move the slices so that order
was restored and each face of the main cube contained just one color.</para>

<para>Mathematicians calculate that a 3x3x3 cube can be shuffled into
43,252,003,274,489,856,000 different patterns, yet they conjecture that all
positions can be solved in 20 moves or less.  The method that can do that
(as yet undiscovered) is called God's Algorithm.  Practical methods can take
more than 100 moves.</para>

<para>In &kubrick; the cube sizes range from 2x2x2 up to 6x6x6, or you can play
with irregular <quote>bricks</quote> such as 5x3x2 or <quote>mats</quote> such
as 6x4x1.  The game has a selection of puzzles at several levels of difficulty,
as well as some demonstrations of pretty patterns and solution moves.  You can
also make up your own puzzles.  Kubrick shuffles the cube by a certain number
of random moves when setting a puzzle.  The difficulty depends on how many
cubies there are in your cube, how many shuffling moves there are and whether
you can view the shuffling moves as they happen.</para>

<para>One kind of puzzle has a small number of shuffling moves (3, 4 or 5) and
the idea is to solve the cube in that number of moves (or less).  This is fun,
challenging and quite quick.  Then there is the traditional puzzle, with 10 to
20 shuffling moves.  It has been very well explored and written about for the
3x3x3 cube, but is not so well known for other sizes.  Finally you can try
finding pretty patterns for sizes other than 3x3x3.</para>

</chapter>

<chapter id="using-kubrick">
<title>Using &kubrick;</title>

<para>
<screenshot>
<screeninfo>Here's a screenshot of &kubrick;</screeninfo>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="screenshot.png" format="PNG"/>
	  </imageobject>
	  <imageobject>
	    <imagedata fileref="screenshot.eps" format="EPS"/>
	  </imageobject>
	  <textobject>
	    <phrase>Screenshot</phrase>
	  </textobject>
	</mediaobject>
</screenshot>
</para>


<sect1 id="making-moves">
<title>Making Moves</title>

<para>&kubrick; offers you a choice of three scenes, involving one two or three
views of the same cube.  Use the <guimenu>Go</guimenu> menu, the
<keycap>PageUp</keycap> and <keycap>PageDown</keycap> keys or the
arrow buttons on the toolbar to move between them.</para>

<para>You can use either the mouse or the keyboard to make moves.</para>

<para>Use the left mouse-button or keyboard to rotate single slices of the
cube around any axis, as when solving a puzzle.  Square slices (e.g. 4x4 cubies)
rotate by 90 degrees at a time.  Rectangular slices (e.g. 5x3 cubies) rotate
by 180 degrees.</para>

<para>Use the right mouse-button to rotate the whole cube, 90 degrees
at a time, around any axis.  You can also use the <keycap>C</keycap>
key, within a keyboard sequence, to rotate the whole cube.  Such moves
do not lead to a solution of the puzzle, but you might use them to
examine the current position more closely or to get a cubie into position for
a sequence of solution moves, such as untwisting two corners.</para>
</sect1>

<sect1 id="mouse-moves">
<title>Using the Mouse to Move</title>

<para>To move using the mouse, click on any colored sticker on any
view of the cube, hold the left or right button down, drag onto another
sticker on the same view and let the button go.  This indicates which slice
(left button) or face (right button) to move and in which direction.  The
slice or face contains the first sticker you selected and it moves in the
direction towards the second sticker.  It is easiest, at first, if you go
from one face of the cube to another, crossing an edge of the cube, but that
is not essential.</para>

<para>To help you see what will happen, the perimeters of the slices or
faces that can move will begin to blink as you hold the mouse button down,
after a short delay.  The pattern of blinking will change as you move the
mouse around.  When you have just one ring of stickers blinking, that is
the ring that will rotate when you let go of the mouse button.  The delay
is so that expert players can move before the blinking starts and not be
distracted by it.</para>
</sect1>

<sect1 id="keyboard-moves">
<title>Using the Keyboard to Move</title>

<para>To move the cube with the keyboard, first use key x, y or z to select an
axis.  On the screen, the X axis runs from left to right, the Y axis from bottom
to top and the Z axis towards you from behind the screen.  Now, to move the
whole cube use key c or to move a slice use keys 1 to 6, to select a slice
number followed by left-arrow for anti-clockwise rotation and right-arrow
for clockwise.  The slice that is going to move (numbered 1 to 6) will blink,
until you hit the arrow key.  You can then change your move by using x, y, z
or 1 to 6 again.</para>

<para>Here is a list of other keystroke, menu or toolbar actions you might use
regularly while playing.</para>

<variablelist>
<varlistentry>
<term><menuchoice><shortcut><keycap>U</keycap></shortcut>
<guimenu>Move</guimenu><guimenuitem>Undo</guimenuitem></menuchoice></term>
<listitem><para>Undo a previous move (repeatedly if required).</para></listitem>
</varlistentry>

<varlistentry>
<term><menuchoice><shortcut><keycap>Shift+U</keycap></shortcut>
<guimenu>Move</guimenu><guimenuitem>Restart Puzzle (Undo All)</guimenuitem></menuchoice></term>
<listitem><para>Undo all previous moves (start again).</para></listitem>
</varlistentry>

<varlistentry>
<term><menuchoice><shortcut><keycap>R</keycap></shortcut>
<guimenu>Move</guimenu><guimenuitem>Redo</guimenuitem></menuchoice></term>
<listitem><para>Redo a previously undone move (repeatedly if
required).</para></listitem>
</varlistentry>

<varlistentry>
<term><menuchoice><shortcut><keycap>Shift+R</keycap></shortcut>
<guimenu>Move</guimenu><guimenuitem>Redo All</guimenuitem></menuchoice></term>
<listitem><para>Redo all previously undone moves.</para></listitem>
</varlistentry>

<varlistentry>
<term><menuchoice><shortcut><keycap>N</keycap></shortcut>
<guimenu>Game</guimenu><guimenuitem>New Puzzle</guimenuitem></menuchoice></term>
<listitem><para>Start a new puzzle of the same kind (same cube and same
number of shuffling moves).</para></listitem>
</varlistentry>

<varlistentry>
<term><menuchoice><shortcut><keycap>S</keycap></shortcut>
<guimenu>Move</guimenu><guimenuitem>Solve</guimenuitem></menuchoice></term>
<listitem><para>Solve the cube.  This shows all your moves being undone,
then all the shuffling moves being undone and then the shuffling moves
being re-done, leaving you set up to have another go at the
puzzle).</para></listitem>
</varlistentry>

<varlistentry>
<term><menuchoice><shortcut><keycap>T</keycap></shortcut>
<guimenu>Move</guimenu><guimenuitem>Start/Stop Tumbling</guimenuitem></menuchoice></term>
<listitem><para>Start or stop a tumbling motion of the cube.</para></listitem>
</varlistentry>

<varlistentry>
<term><menuchoice><shortcut><keycap>Home</keycap></shortcut>
<guimenu>Move</guimenu><guimenuitem>Clear Tumbling to Zero</guimenuitem></menuchoice></term>
<listitem><para>Restore a tumbled cube to its starting
orientation.</para></listitem>
</varlistentry>

</variablelist>

<para>
The Squiggle Tool <guiicon><inlinemediaobject>
	  <imageobject>
	    <imagedata fileref="squiggle.png" format="PNG"/>
	  </imageobject>
	  <imageobject>
	    <imagedata fileref="squiggle.eps" format="EPS"/>
	  </imageobject>
	  <textobject>
	    <phrase>Squiggle</phrase>
	  </textobject>
</inlinemediaobject></guiicon> is used to draw squiggly lines all over
the &kubrick; main window. It's not a bug, it's a feature!
</para>
</sect1>
</chapter>

<chapter id="commands">
<title>Command Reference</title>

<!-- (OPTIONAL, BUT RECOMMENDED) This chapter should list all of the
application windows and their menubar and toolbar commands for easy reference.
Also include any keys that have a special function but have no equivalent in the
menus or toolbars. This may not be necessary for small apps or apps with no tool
or menu bars. -->

<sect1 id="kubrick-mainwindow">
<title>The main &kubrick; window</title>

<sect2>
<title>The File Menu</title>
<para>
<variablelist>
<varlistentry>
<term><menuchoice>
<shortcut>
<keycombo action="simul">&Ctrl;<keycap>N</keycap></keycombo>
</shortcut>
<guimenu>File</guimenu>
<guimenuitem>New</guimenuitem>
</menuchoice></term>
<listitem><para><action>Creates a new document</action></para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<shortcut>
<keycombo action="simul">&Ctrl;<keycap>S</keycap></keycombo>
</shortcut>
<guimenu>File</guimenu>
<guimenuitem>Save</guimenuitem>
</menuchoice></term>
<listitem><para><action>Saves the document</action></para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<shortcut>
<keycombo action="simul">&Ctrl;<keycap>Q</keycap></keycombo>
</shortcut>
<guimenu>File</guimenu>
<guimenuitem>Quit</guimenuitem>
</menuchoice></term>
<listitem><para><action>Quits</action> &kubrick;</para></listitem>
</varlistentry>
</variablelist>
</para>

</sect2>

<sect2>
<title>The <guimenu>Help</guimenu> Menu</title>

<!-- Assuming you have a standard help menu (help, what's this, about -->
<!-- &kubrick;, about KDE) then the documentation is already written. -->
<!-- The following entity is valid anywhere that a variablelist is -->
<!-- valid.  -->

&help.menu.documentation;

</sect2>

</sect1>
</chapter>

<chapter id="developers">
<title>Developer's Guide to &kubrick;</title>

<!-- (OPTIONAL) A Programming/Scripting reference chapter should be
used for apps that use plugins or that provide their own scripting hooks
and/or development libraries. -->

<para>
Programming &kubrick; plugins is a joy to behold. Just read through the next
66 pages of API's to learn how!
</para>

<!-- Use refentries to describe APIs.  Refentries are fairly complicated and you
should consult the docbook reference for further details. The example below was
taken from that reference and shortened a bit for readability. -->

<refentry id="re-1007-unmanagechildren-1">
<refmeta>
<refentrytitle>XtUnmanageChildren</refentrytitle>
<refmiscinfo>Xt - Geometry Management</refmiscinfo>
</refmeta>
<refnamediv>
<refname>XtUnmanageChildren
</refname>
<refpurpose>remove a list of children from a parent widget's managed
list.
<indexterm id="ix-1007-unmanagechildren-1"><primary>widgets</primary><secondary>removing</secondary></indexterm>
<indexterm id="ix-1007-unmanagechildren-2"><primary>XtUnmanageChildren</primary></indexterm> 
</refpurpose>

</refnamediv>
<refsynopsisdiv>
<refsynopsisdivinfo>
<date>4 March 1996</date>
</refsynopsisdivinfo>
<synopsis>
void XtUnmanageChildren(<replaceable class="parameter">children</replaceable>, <replaceable class="parameter">num_children</replaceable>)
    WidgetList <replaceable class="parameter">children</replaceable>;
    Cardinal <replaceable class="parameter">num_children</replaceable>;
</synopsis>

<refsect2 id="r2-1007-unmanagechildren-1">
<title>Inputs</title>
<variablelist>
<varlistentry>
<term><replaceable class="parameter">children</replaceable>
</term>
<listitem>
<para>Specifies an array of child widgets. Each child must be of
class RectObj or any subclass thereof.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><replaceable class="parameter">num_children</replaceable>
</term>
<listitem>
<para>Specifies the number of elements in <replaceable class="parameter">children</replaceable>.
</para>
</listitem>
</varlistentry>
</variablelist>
</refsect2></refsynopsisdiv>

<refsect1 id="r1-1007-unmanagechildren-1">
<title>Description
</title>
<para><function>XtUnmanageChildren()</function> unmaps the specified widgets
and removes them from their parent's geometry management.
The widgets will disappear from the screen, and (depending
on its parent) may no longer have screen space allocated for
them.
</para>
<para>Each of the widgets in the <replaceable class="parameter">children</replaceable> array must have
the same parent.
</para>
<para>See the &ldquo;Algorithm&rdquo; section below for full details of the
widget unmanagement procedure.
</para>
</refsect1>

<refsect1 id="r1-1007-unmanagechildren-2">
<title>Usage</title>
<para>Unmanaging widgets is the usual method for temporarily
making them invisible.  They can be re-managed with
<function>XtManageChildren()</function>.
</para>
<para>You can unmap a widget, but leave it under geometry
management by calling <function>XtUnmapWidget()</function>.  You can
destroy a widget's window without destroying the widget by
calling <function>XtUnrealizeWidget()</function>.  You can destroy a
widget completely with <function>XtDestroyWidget()</function>.
</para>
<para>If you are only going to unmanage a single widget, it is
more convenient to call <function>XtUnmanageChild()</function>.  It is
often more convenient to call <function>XtUnmanageChild()</function>
several times than it is to declare and initialize an array
of widgets to pass to <function>XtUnmanageChildren()</function>.  Calling
<function>XtUnmanageChildren()</function> is more efficient, however,
because it only calls the parent's <function>change_managed()</function>
method once.
</para>
</refsect1>

<refsect1 id="r1-1007-unmanagechildren-3">
<title>Algorithm
</title>
<para><function>XtUnmanageChildren()</function> performs the following:
</para>
<variablelist>
<varlistentry>
<term>-
</term>
<listitem>
<para>Ignores the child if it already is unmanaged or is being
destroyed.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>-
</term>
<listitem>
<para>Otherwise, if the child is realized, it makes it nonvisible
by unmapping it.
</para>
</listitem>
</varlistentry>
</variablelist>
<para>
</para>
</refsect1>

<refsect1 id="r1-1007-unmanagechildren-4">
<title>Structures</title>
<para>The <type>WidgetList</type> type is simply an array of widgets:
</para>
<screen id="sc-1007-unmanagechildren-1">typedef Widget *WidgetList;
</screen>
</refsect1>
</refentry>

</chapter>

<chapter id="faq">
<title>Questions and Answers</title>

<!-- (OPTIONAL but recommended) This chapter should include all of the silly
(and not-so-silly) newbie questions that fill up your mailbox. This chapter
should be reserved for BRIEF questions and answers! If one question uses more
than a page or so then it should probably be part of the
"Using this Application" chapter instead. You should use links to
cross-reference questions to the parts of your documentation that answer them.
This is also a great place to provide pointers to other FAQ's if your users
must do some complicated configuration on other programs in order for your
application work. -->

&reporting.bugs;
&updating.documentation;

<qandaset id="faqlist">
<qandaentry>
<question>
<para>My Mouse doesn't work. How do I quit &kubrick;?</para>
</question>
<answer>
<para>You silly goose! Check out the <link linkend="commands">Commands
Section</link> for the answer.</para>
</answer>
</qandaentry>
<qandaentry>
<question>
<para>Why can't I twiddle my documents?</para>
</question>
<answer>
<para>You can only twiddle your documents if you have the foobar.lib
installed.</para>
</answer>
</qandaentry>
</qandaset>
</chapter>

<chapter id="credits">

<!-- Include credits for the programmers, documentation writers, and
contributors here. The license for your software should then be included below
the credits with a reference to the appropriate license file included in the KDE
distribution. -->

<title>Credits and License</title>

<para>
&kubrick;
</para>
<para>
Program copyright 2006 Ian Wadham <email>ianw@netspace.net.au</email>
</para>
<para>
Contributors:
<itemizedlist>
<listitem><para>Konqui the KDE Dragon <email>konqui@kde.org</email></para>
</listitem>
<listitem><para>Tux the Linux Penguin <email>tux@linux.org</email></para>
</listitem>
</itemizedlist>
</para>

<para>
Documentation copyright 2006 Ian Wadham <email>ianw@netspace.net.au</email>
</para>

<!-- TRANS:CREDIT_FOR_TRANSLATORS -->

&underFDL;               <!-- FDL: do not remove -->

<!-- Determine which license your application is licensed under, 
     and delete all the remaining licenses below:

     (NOTE:  All documentation are licensed under the FDL, 
     regardless of what license the application uses) -->

&underGPL;        	 <!-- GPL License -->
&underBSDLicense;        <!-- BSD License -->
&underArtisticLicense;   <!-- BSD Artistic License -->
&underX11License;        <!-- X11 License  -->

</chapter>

<appendix id="installation">
<title>Installation</title>

<sect1 id="getting-kubrick">
<title>How to obtain &kubrick;</title>

<!-- This first entity contains boiler plate for applications that are
part of KDE CVS.  You should remove it if you are releasing your
application --> 

&install.intro.documentation;

</sect1>

<sect1 id="requirements">
<title>Requirements</title>

<!--
List any special requirements for your application here. This should include:
.Libraries or other software that is not included in kdesupport,
kdelibs, or kdebase.
.Hardware requirements like amount of RAM, disk space, graphics card
capabilities, screen resolution, special expansion cards, etc.
.Operating systems the app will run on. If your app is designed only for a
specific OS, (you wrote a graphical LILO configurator for example) put this
information here.
-->

<para>
In order to successfully use &kubrick;, you need &kde; 1.1. Foobar.lib is
required in order to support the advanced &kubrick; features. &kubrick; uses
about 5 megs of memory to run, but this may vary depending on your
platform and configuration.
</para>

<para>
All required libraries as well as &kubrick; itself can be found
on <ulink url="ftp://ftp.kubrick.org">The &kubrick; home page</ulink>.
</para>

<!-- For a list of updates, you may refer to the application web site
or the ChangeLog file, or ... -->
<para>
You can find a list of changes at <ulink
url="http://apps.kde.org/kubrick">http://apps.kde.org/kubrick</ulink>.
</para>
</sect1>

<sect1 id="compilation">
<title>Compilation and Installation</title>

<!-- This entity contains the boilerplate text for standard -->
<!-- compilation instructions.  If your application requires any -->
<!-- special handling, remove it, and replace with your own text. -->

&install.compile.documentation;

</sect1>

<sect1 id="configuration">
<title>Configuration</title>

<para>Don't forget to tell your system to start the <filename>dtd</filename>
dicer-toaster daemon first, or &kubrick; won't work !</para>

</sect1>

</appendix>

&documentation.index;
</book>

<!--
Local Variables:
mode: sgml
sgml-minimize-attributes:nil
sgml-general-insert-case:lower
sgml-indent-step:0
sgml-indent-data:nil
End:

vim:tabstop=2:shiftwidth=2:expandtab 
-->

